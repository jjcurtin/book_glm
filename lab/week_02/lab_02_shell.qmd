---
title: "Lab 2 Student Script" 
author: "TAs" 
date: "`r lubridate::today()`"
format: 
  html:
    toc: true 
    toc_depth: 4
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

# This week's fun with R

Install the below package if you have not already! 

What is this package for? When you do not understand a package or a specific function, `??` and `?` functions are here to help! Use `??` to look up help pages for all functions in a package and use `?` to look up help pages for specific functions. You could also google...

```{r}
#install.packages("RXKCD",repos = "http://cran.us.r-project.org") 

```

It seems that this package is really for getting XKCD comic strips! Let's try one. Hit the zoom button for a better view of the comic. 

Note that we used the `getXKCD()` function from the RXKCD package without loading the package (i.e., without running `library(RXKCD)`)? You can source a specific function from a package by adding `packagename::` before the function you want to use.

```{r}

```

***What is the statistical issue that this comic raises?***



# Questions about lectures/labs/this course in general?

# Setup R

Make sure your `psych_610` project is open!    

Set conflict policy
```{r}

```

Load packages
```{r}

```

Set `data_path` - this will be the relative path from your project directory (`psych_610`) to where you saved your lab files. Ideally this should be the same path for everyone!
```{r}

```


# Piping 

In this class, we will often use ` |> ` (native R pipes) to write code. Pipes help to structure code in a step-by-step manner and improve the readability of code. The shortcut to insert a pipe is `Ctrl` + `Shift` + `M` on Windows computers and `Command` + `Shift` + M on Mac computers. 

Basically, ` |> ` ports whatever is on its left hand side (could be an R object, output from a function, or output from a previous pipe operation) into ***the first argument*** of the function on its right hand side. For example, the two lines of code below do the same thing:

```{r}

```

For the purpose of this class, we will by default use pipes to code.

# Data for today

We will use data collected from you all for today's lab.

- section: Which section are you in?
  * Morning (9-11 on Friday) with Coco, Brogden rm 228
  * Afternoon (1:30-3:30 on Friday) with Shanti, Brogden rm 138
  * Morning (9-11 on Friday) with Jamie, Brogden rm 138
- fake_age: What is your fake age in years?
- stats_before: Have you taken a statistics course before?
  * Yes/No
- stats_course: How many statistics courses have you taken?
- r_before: Have you used R or R studio before?
  * Yes/No
- stats_exp: What's your experience with statistics?
  * None at all (1) - Near Mastery (5)
- stats_conf:  How confident do you feel in your ability to learn statistics over the course of this class?
  * Not at all confident (1) - Very confident (5)
- prog_exp:  What's your experience with programming?
  * None at all (1) - Near Mastery (5)
- r_exp:  What's your experience with R/R studio?
  * None at all (1) - Near Mastery (5)
- r_conf:  How confident do you feel in your ability to learn programming/R over the course of this class?
  * Not at all confident (1) - Very confident (5)
- pineapple_pizza:  Pineapple on Pizza?
  * Yes/No

Which of these variables are unordered categorical?

- section
- stats_before
- r_before 
- pineapple_pizza

... are ordered categorical?

- stats_exp
- stats_conf
- prog_exp
- r_exp
- r_conf

... are numeric?

- fake_age, stats_course

Remember, variables have different classes. When reading data into R, functions like `read_csv()` makes its best guess on variable classes, but variables could be misclassified. Thus, it is important to look at your data dictionary/documentation and correct any misclassified variables. For example, variables like stats_exp were likert scale items. Although likert scales can be expressed in numeric terms, they are still factors in nature. Treating likert scale items as numeric variables should be a deliberate decision that you make!

For today's purpose, we skip variable classing.

# Structure of the data

There are no statistics without data. Most of the time, we want to work with some data in R. Data come in many different formats.  Most of these formats are like spreadsheets, but they use a special character to separate cells horizontally. This special character is called a "delimiter".  Two of the most common formats are "tab-delimited" (cells in a row are separated by `  `; usually ending with ".dat", as in "data.dat") and "comma-delimited" (cells in a row are separated by a `,`; usually ending with ".csv", as in "data.csv"). We will also cover other less typical file formats (e.g., .xlsx) later this semester. 


Usually, the data we want to use are saved as a file somewhere on your computer. Thus, we need to tell R where the data file is located so as to read it into R. 


Today we will use data from lab_02_data.csv. Now, let's try to read in the data using relative paths.


Remember, by opening the psych_610 Rproject, our *psych_610* folder is treated as the root folder. We can double check that this is root folder by running `getwd()`. 

```{r}

```


We will use the `here()` function in the `here` package (`here::here()`). If you provide the path of a target file relative to the project root directory (i.e., the *psych_610* folder), `here::here()` will help print out the full path to that target file. In our case, we can specify the relative path as the following:

```{r}

```


Next, we can use the `read_csv()` function to read in the data and save it as an R object. Note that you can give your data object whatever name you want, and you still get the same data object.

```{r}

```


However, we will default to data_something (i.e., data_raw) for clarity when we name tibbles. So let's delete whatever_name from our environment, read in the data again, and give it a nice name. It will be extremely important for you to name things in R in a clear, logical  way (not just for you but also for others who will see your scripts, including your TAs, advisors, people who request your data files, etc.).


You can use the `rm()` command to remove things from your R environment (see the environment window in RStudio). The environment is R's short-term memory, where things you create using R code are temporarily stored. R (and your computer) can become very slow if you environment is full. It is important to maintain a clean R environment and keep useful R objects only.

```{r}

```

Next, we will read in the .csv file. Remember, we will stick to *snake case* as our naming convention for clarity and consistency. A function from package `janitor` helps turn the column (variable) names of our tibble into snake case.

```{r}

```

Quickly look at the column names. There's one variable name (`rbefore`) that still looks weird. Let's fix it!

```{r}

```


Now data_raw should appear in under the environment tab. That .csv data file is now loaded into R. Once it's in R we'll refer to it as a "tibble" (`tbl`). A tibble is a special kind of dataframe (i.e., spreadsheet) with some extra properties. We will not get into the details today.


# Viewing the data

## Eyeballing 


Now that data_raw is loaded into R, let's take a look at it. The easiest way to look at a tibble is by eyeballing. A tibble is essentially a table with rows and columns, and you can eyeball a tibble just like an excel spreadsheet.


By convention, each row in a tibble usually represents an observation, while each column represents a variable.

### Full tibble

You can eyeball the whole tibble by clicking on its name (i.e., data_raw) under the environment tab (to the right) or run the following command:

```{r}

```

### Printing in console

Remember, your tibble is stored in your R environment just like any other R objects. Thus, you could print out the tibble in the R console by calling its object name. Note that this is not ideal, especially when the tibble has too many rows and columns.

```{r}

```


### Row-wise subsetting


#### `slice()`

Sometimes a tibble can be extremely large (thousands of rows). Sometimes you do not need to see the full tibble, but only a couple rows. This is where `slice()` comes in. Look at the help page for `slice()` How do we use this function?


`slice()` allows you to subset a tibble by row.

```{r}
?slice

# pull the 10-15th row from data_raw

# pull the first 10 rows
# pull the bottom 25% of all rows

# pull 5 random rows
```

#### `filter()`

We may also be interested in picking rows from a dataframe by a certain rule. For example, what if we want to see all rows of students who had used R before? 

```{r}

```

What if we want to see rows of students who had taken a statistics class but had not used R before?

```{r}

```

What if we want to see rows of students who had either taken a statistics class or had used R before?

```{r}

```

### Column-wise subsetting

#### `select()`

What if we only want to look at certain columns or variables of interest? We can subset and manipulate those columns using `select()`.

```{r}
# variable pineapple_pizza

# all variables except pineapple_pizza and r_conf

# all variables from stats_exp to r_exp

# all variables ending with exp

# all character variables
```

#### `pull()`

One limitation of `select()` is that its output is always a tibble, even if only one column is selected. This is inconvenient if we want to extract one particular variable and use it to do some vector operation (i.e., calculate its mean). In this case, `pull()` allows you to select a variable and, since its output is always a vector, do vector operations.

```{r}
# data_raw |> select(stats_exp) |> mean()

```


### Glimpsing

In addition, `glimpse()` does somewhat the same thing as `slice_head` but `glimpse()` puts variables of a tibble into rows. `glimpse()` also outputs variable class and number of rows/columns of a tibble.

Importantly, `glimpse()` returns the input tibble as its output, thus making it easy to glimpse the data when you read it into R. This is not possible with other eyeballing functions.

```{r}

```


## Descriptive statistics

Instead of looking at the data row-by-row and column-by-column, a better way to get a sense about your data is to inspect descriptive statistics. Descriptive statistics describe features of a tibble by generating summaries (e.g., mean, standard deviation) about each of the variables.


### Package skimr

For the purpose of descriptive statistics, we will make extensive use of package *skimr*. Remember, you can use `??` to request info about all functions in a package. Look in to the function `skim()`.


The output of `skim()`consists of multiple sections: a data summary section, and one section for each variable class. 

```{r}
??skimr
?skim


```


`skim()` is compatible with the tidyverse function `select()` if descriptive statistics for specific variables are of interest.

```{r}

```


The output of skimr functions like `skim()` is in fact a tibble. You can save this tibble and further manipulate it.

```{r}

```


### Summary statistics using `summarise`

You can also create your own summary statistics using `summarise`. 

```{r}

```


It is also possible to get complicated with `summarise`. For example, this is more or less what `skim()` is doing under the hood.

```{r}

```


### Grouping

Sometimes, observations can be separated into different groups. Descriptive statistics within each of those groups may be more interesting. Let's take a look at the average stats_exp and its standard deviation by pineapple_pizza.

```{r}

```


Note that the same is possible with `skim()`.

```{r}

```


### Tabulation

Sometimes you may be interested in knowing all possible responses on a variable and the number of observations that go with each possible response. The function `table()` helps build a contingency table of the counts at each combination of factor level.

```{r}

```

# Manupulating Data

Now that we are done inspecting the data, it's time to go into the data and prepare them for analysis. This would typically require us to manipulate existing variables and create new variables. A lot of times, we will use the `mutate()` function. `mutate()` creates new columns or overwrites existing variables in a tibble that are functions of existing variables.

## Centering

Sometimes we want to transform our variables so that they have a mean of 0. This is because a mean of 0 typically aids the interpretation of results in more complex regression models (interaction effects, etc.). You will learn more about this in the lectures. 

Let's try to mean center stats_exp. In the code below, we subtract the mean of stats_exp from its individual scores and create a new variable called stats_exp_c. According to our naming conventions, "_c" post-fix represents centered scores. Next, we verify that the mean of the mean-centered variable we created is actually zero.

Remember to assign the output from `mutate()` back to data_raw, or the new variable will not be saved.

```{r}

```


## Standardizing

A standardized variable (AKA a z-scored variable) has a mean of zero AND a standard deviation of 1.

When you have two variables on different scales but you want to compare them, standardizing may help. By making both variables M = 0 and SD = 1, we are essentially putting them on the same "unit" (e.g., kg to lbs).


What do we have to do to standardize a variable? Subtract the mean and divide by the standard deviation. 

Let's do that together for r_conf and name it r_conf_z. The "_z" post-fix represents standardized scores, or z scores. 


```{r}

```


How can we check that it's standardized? It should have mean 0 and sd 1. Check if the variable is standardized correctly.
```{r}

```


## Recoding

Factor variables can come with text labels. For example, our r_before variable has two possible values: "Yes" and "No". These labels cannot be used directly in data analysis, and we need to recode these labels into numeric variables. We will use post-fix "_01" to denote text values we recode to numeric.


One way to do this is using `case_match()`.
```{r}
?case_match 

```

For factors with only two levels, it may be easier to use `if_else()`.
```{r}

```

It is also possible to create **centered numeric codings** (i.e., r_before_c) for two-level factor variables, such that one level takes the value of 0.5 and the other -0.5.
```{r}

```


## Composite and average score

We have 2 different variables about confidence in learning through this class. What if we wanted to combine them into a single, general confidence score? 

We can simply create a new variable: each value on the new variable is the sum of values on the two old variables divided by two. This may seem old-fashioned... We will learn how to write custom functions to do scoring in the future.

We will use the post-fix "_m" to denote composite average scores.
```{r}

```


Check out some descriptive statistics of the new variable
```{r}

```


## Naming Convention Reminder:

- "_c" for mean-centered variables
- "_z" for standardized (i.e., z-scored) variables
- label the numeric values assigned to factor levels accordingly
- "_m" for composite/average scores


# Quick and Dirty Plotting


## Histograms

Histograms are an easy-way-out to look at the distribution of a variable.

```{r}

```

Generates a histogram where the x-axis represents all possible values at which a participant could rate their confidence about learning R, and the y-axis represents the number of participants who rated their confidence at that specific value.

## Basic scatter plot (x-axis data, y-axis data)

```{r}

```
