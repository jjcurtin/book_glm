---
title: "Slideset Q&A Style Demo"
format: revealjs
---

## Fragments

This is a new revealJS feature does exactly what we want! A "fragment" only appears when you click, as if advancing the slide. It allows a Q&A to remain on a single slide, while retaining the functionality of advancing between slides.

In this case I have hidden both the question and the answer, each inside a separate 3-colon fence. This forces people to read/listen to the initial text on the side, and not just jump to the question:

:::{.fragment}
[Here's a question?]{style="color:red;"}
:::

:::{.fragment}
[Here's the answer.]{style="color:green;"}
:::

## Ways to Define Fragments

You can use the `{.fragment}` specification directly on text or image, and it's exactly the same as enclosing it in the 3-colon fence, just less typing:

An image just has the brace at the end:
![](https://dionysus.psych.wisc.edu/Facebook/cover.png){.fragment}

### So does a header{.fragment}

[Text must be inside square brackets, followed by the .fragment brace.]{.fragment}

## Fragments with Graphs

You can add other items besides text in a fragment:

::: {.callout-important}
## What is the question?
:::

:::{.fragment}
Here's an answer. Advance again to see a graph!
:::

:::{.fragment}

```{r}
#| echo: true
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
:::

## Fragment for code output

Maybe you want the code for a graph to appear before the output. In that case, put the code chunk in a fragment and ALSO specify the `#| output-location: fragment` option.

::: {.callout-important}
## What is the question?
:::

:::{.fragment}
Here's an answer. Only the code will appear next. Advance one more time to see the graph.
:::

:::{.fragment}
```{r}
#| echo: true
#| output-location: fragment
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
:::

## Nested Fragments

If you nest fragment fences, you can sequentially apply multiple styles to a single object:

::: {.fragment .fade-in}
:::: {.fragment .highlight-red}
::::: {.fragment .semi-fade-out}
Fade in > Turn red > Semi fade out
:::::
::::
:::

Fragments can decorate text as well as just display it! See [this reference document](https://quarto.org/docs/presentations/revealjs/advanced.html#fragments) for more fragment options.

## Question Styling

You can use either simple red styling or apply the callout styling to a question. Here are a few options side by side. Note that styling and fragment can be applied in the same braces, whether used with fences or directly on an object or text.

::: {.fragment .callout-important}
## Question with callout styling (John's preferred)
:::

:::{.fragment style="color:green;"} 
Answer.
:::

### Question as header (bold/larger text) with red styling{.fragment style="color:red;"}

[Answer]{.fragment style="color:green;"} 


[Question as text with red styling]{.fragment style="color:red;"}

[Answer]{.fragment style="color:green;"} 


[I also tested fragments with printing. All fragments are revealed in the output when using ctrl-P from a browser!]{.fragment style="color:blue;"} 


## Historical Record of Previous Styles

For reference only, here are some older styles and the reasons we stopped using them

## Separate Slides

### Here is the question{style="color:red;"}

## Separate Slides

### Here is the question{style="color:red;"}

[A new slide shows the answer, too.]{style="color:green;"}

This is cumbersome, adding 2 slides for every question.


## Callout

Alas, this wonderful feature does not work in revealJS but works well for html web books

::: {.callout-important collapse="true"}

### This is the question you want displayed?

Here's the answer! This can be as long as you want but only in HTML.

:::

## Code Folding

Our previous final solution was code folding, BUT, this only works if you only displaying text. As soon as you try to include a graph in the callout, the graph itself is visible before you click:

::: {.callout-important collapse="false"}
## If the DGP for y is a cubic function of x, what do we know about the expected bias for our three candidate model configurations in this example?

```{html}
#| echo: true
#| code-fold: true
#| code-summary: "Show Answer"
The simple linear model will underfit the true DGP and therefore it will be biased b/c 
it can only represent y as a linear function of x.  

The two polynomial models will be generally unbiased b/c they have x represented 
with 20th order polynomials.  

LASSO will be slightly biased due to regularization but more on that in a later unit

```

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show code"
# A graph 
plot(mtcars$disp, mtcars$qsec)
```
:::