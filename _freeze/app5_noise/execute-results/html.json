{
  "hash": "ab9e838e67f1ee1eaa9b6911620e4594",
  "result": {
    "engine": "knitr",
    "markdown": "---\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Monte Carlo Simulation of Contrast Approaches {.unnumbered}\n\n\n::: {.cell}\n\n:::\n\n\n### 3 Groups with No Group Differences (Type I Errors) \n\nSet up simulation characteristics for Null Findings.\n\nThis will allow us to determine Type I error rates because any signficant effect is a type I error given we have set the population effect to 0\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulate N experiments\nn_experiments <- 10000\nn <- 200\nset.seed(1234567)\nBeta <- 10\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_data <- function(n, Beta, noise_x = 0, noise_y = 0){\n  x <- rnorm(n, 0, 10)\n  y <- 0 + Beta * x + rnorm(n, 0, 10) \n  \n  if (noise_x != 0) {\n    x <- x + rnorm(n, 0, noise_x)\n  }\n  if (noise_y != 0) {\n    y <- y + rnorm(n, 0, noise_y)\n  }\n  \n  tibble(x, y) \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_b <- function(n, Beta, noise_x = 0, noise_y = 0){\n  \n  get_data(n, Beta, noise_x, noise_y) |> \n  lm(y ~ x, data = _) |> \n    tidy() |> \n    filter(term == \"x\") \n}\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n## Simulate no additional noise in Y (beyond e)\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_none <- 1:n_experiments |> \n  map(\\(i) get_b(n, Beta)) |>\n  list_rbind()\n```\n:::\n\n\nMean of sampling distribution for parameter estimate\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_none |> \n  summarise(mean = mean(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1  10.0\n```\n\n\n:::\n:::\n\n\nStandard deviation of sampling distribution for parameter estimate (i.e. SE of b)\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_none |> \n  summarise(sd = sd(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n      sd\n   <dbl>\n1 0.0714\n```\n\n\n:::\n:::\n\n \n\n## Noise in Y\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_y <- 1:n_experiments |> \n  map(\\(i) get_b(n, Beta, noise_y = 10)) |>\n  list_rbind()\n```\n:::\n\n\nMean of sampling distribution for parameter estimate\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_y |> \n  summarise(mean = mean(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1  10.0\n```\n\n\n:::\n:::\n\n\nStandard deviation of sampling distribution for parameter estimate (i.e. SE of b)\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_y |> \n  summarise(sd = sd(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n      sd\n   <dbl>\n1 0.0997\n```\n\n\n:::\n:::\n\n\n## Noise in X\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_x <- 1:n_experiments |> \n  map(\\(i) get_b(n, Beta, noise_x = 10)) |>\n  list_rbind()\n```\n:::\n\n\nMean of sampling distribution for parameter estimate\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_x |> \n  summarise(mean = mean(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1  5.00\n```\n\n\n:::\n:::\n\n\nStandard deviation of sampling distribution for parameter estimate (i.e. SE of b)\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_x |> \n  summarise(sd = sd(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n     sd\n  <dbl>\n1 0.360\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}