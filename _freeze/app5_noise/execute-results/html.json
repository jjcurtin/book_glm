{
  "hash": "53d4ab5723df950456e306e0f9fd9955",
  "result": {
    "engine": "knitr",
    "markdown": "---\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Simulate Noise Added to $X$ vs. $Y$ {.unnumbered}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## The problem\n\nLinear models assume that there is no noise in the measurement of $X$.  In contrast, noise in $Y$ is permitted (and modeled) by the inclusion of an error term (the residuals) into the model.\n\nIf there is noise in $X$ in a simple (one predictor) model, we will underestimate the effect of $X$.  In models with more than one $X$, we may either underestimate or overestimate the unique effect of an $X$ controlling for $X2$ if we add noise to $X2$, depending on the pattern of relationships among the $X$s and $Y$\n\nLets understand this a bit better.  We can start by setting up a context to simulate estimating the effect of $X$ by repeatedly sampling $X$ and $Y$ from the population so that we can look at the sampling distribution for $b_x$.  We will consider three conditions\n\n1. A baseline model with $X$ and $Y$\n2. The addition of noise to $Y$\n3. The addition of noise to $X$\n\n## Set up simulation characteristics\n\nWe set up these (mostly arbitrary) characteristics for our simulation\n\n- 20000 simulations\n- sample size of 200\n- Population effect for $X$ of $\\beta_x$ = 3 \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_experiments <- 20000\nn <- 200\nBeta <- 3 \n\nset.seed(1234567)\n```\n:::\n\n\n\n\n## Set up some functions to support simulation\n\nThis function draws a sample of data using the characteristics set by the function arguments\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_data <- function(n, Beta, noise_x = 0, noise_y = 0){\n  x <- rnorm(n, 0, 10)\n  y <- 0 + Beta * x + rnorm(n, 0, 10) \n\n  # add noise to our measurement of either X or Y  \n  if (noise_x != 0) {\n    x <- x + rnorm(n, 0, noise_x)\n  }\n  if (noise_y != 0) {\n    y <- y + rnorm(n, 0, noise_y)\n  }\n  \n  tibble(x, y) \n}\n```\n:::\n\n\n\n\nThis function draws a sample using earlier function and then fits model and returns statistics for the effect of $X$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_b <- function(n, Beta, noise_x = 0, noise_y = 0){\n  \n  get_data(n, Beta, noise_x, noise_y) |> \n  lm(y ~ x, data = _) |> \n    tidy() |> \n    filter(term == \"x\") \n}\n```\n:::\n\n\n\n\n## Simulations \n\nLets run simulations for our three contexts\n\n- baseline model\n- add noise to y\n- add noise to x\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_none <- 1:n_experiments |> \n  map(\\(i) get_b(n, Beta)) |>\n  list_rbind()\n\nnoise_y <- 1:n_experiments |> \n  map(\\(i) get_b(n, Beta, noise_y = 10)) |>\n  list_rbind()\n\nnoise_x <- 1:n_experiments |> \n  map(\\(i) get_b(n, Beta, noise_x = 10)) |>\n  list_rbind()\n```\n:::\n\n\n\n\nAnd lets look at the parameter estimate and (SE) for $X$ from the three simulations\n\n- Noise in $Y$ has no effect on $b_x$ but it does increase the associated standard error\n- Noise in $X$ introduces bias into $b_x$.  It now underestimates the true $\\beta$ = 3.  This noise, also increase the associated standard error. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nresults_base <- noise_none |> \n  summarise(mean_b = mean(estimate),\n            se_b = sd(estimate)) |>\n  mutate(context = \"baseline\")\nresults_y <- noise_y |> \n  summarise(mean_b = mean(estimate),\n            se_b = sd(estimate)) |>\n  mutate(context = \"noise y\")\nresults_x <- noise_x |> \n  summarise(mean_b = mean(estimate),\n            se_b = sd(estimate)) |>\n  mutate(context = \"noise x\")\n\nresults_base |> \n  bind_rows(results_y) |> \n  bind_rows(results_x) |> \n  relocate(context)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  context  mean_b   se_b\n  <chr>     <dbl>  <dbl>\n1 baseline   3.00 0.0714\n2 noise y    3.00 0.101 \n3 noise x    1.50 0.119 \n```\n\n\n:::\n:::\n\n\n\n\n## Simple demonstration with a single sample\n\nLets dive into the problem a little deeper with a single sample\n\nFirst, lets draw a sample and fit the model.  As we see, the parameter estimate is approximately 3, as expected.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_base <- get_data(n, Beta)\n\nlm(y ~ x, data = d_base) |> \n  tidy() |> \n  filter(term == \"x\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  term  estimate std.error statistic  p.value\n  <chr>    <dbl>     <dbl>     <dbl>    <dbl>\n1 x         2.94    0.0728      40.4 1.20e-97\n```\n\n\n:::\n:::\n\n\n\n\nNow lets see what happens when we add noise to $Y$.  As seen, the parameter estimate is still approximately 3 \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_y <- get_data(n, Beta, noise_y = 10)\n\nlm(y ~ x, data = d_y) |> \n  tidy() |> \n  filter(term == \"x\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  term  estimate std.error statistic  p.value\n  <chr>    <dbl>     <dbl>     <dbl>    <dbl>\n1 x         2.96     0.104      28.5 4.65e-72\n```\n\n\n:::\n:::\n\n\n\n\nNow lets see what happens when we add noise to $X$.  The parameter estimate is much smaller!  It underestimates the effect of $X$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_x <- get_data(n, Beta, noise_x = 10)\n\nlm(y ~ x, data = d_x) |> \n  tidy() |> \n  filter(term == \"x\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  term  estimate std.error statistic  p.value\n  <chr>    <dbl>     <dbl>     <dbl>    <dbl>\n1 x         1.49     0.119      12.5 8.98e-27\n```\n\n\n:::\n:::\n\n\n\n\nLets also visualize all three of these models to understand them better.  Hopefully, this helps your intution regarding why noise in X decreases our estimate of its effect.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np_base <- d_base |> \n  ggplot(aes(x = x, y = y)) +\n    geom_point() +\n    stat_smooth(method = \"lm\", \n                formula = y ~ x, \n                geom = \"smooth\") +\n  xlim(-50, 50) +\n  ylim(-100, 100) +\n  ggtitle(\"baseline\")\n\np_y <- d_y |> \n  ggplot(aes(x = x, y = y)) +\n    geom_point() +                                      \n    stat_smooth(method = \"lm\", \n                formula = y ~ x, \n                geom = \"smooth\") +\n  xlim(-50, 50) +\n  ylim(-100, 100) + \n  ggtitle(\"y noise\")\n\np_x <- d_x |> \n  ggplot(aes(x = x, y = y)) +\n    geom_point() +\n    stat_smooth(method = \"lm\", \n                formula = y ~ x, \n                geom = \"smooth\") +\n  xlim(-50, 50) +\n  ylim(-100, 100) +\n  ggtitle(\"x noise\")\n\np_base + p_y + p_x\n```\n\n::: {.cell-output-display}\n![](app5_noise_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "app5_noise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}